/** @define Grid; use strict */

$Grid-font-size: 1rem; // TODO: base font size (REM?)
$Grid-gutter-size: 20px; // TODO: gutter variable

/**
 * Core grid component
 *
 * DO NOT apply dimension or offset utilities to the `Grid` element. All cell
 * widths and offsets should be applied to child grid cells.
 */

/* Grid container
   ========================================================================== */

/**
 * All content must be contained within child `Grid-cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 * 2. Remove inter-cell whitespace that appears between `inline-block` child
 *    elements.
 * 3. Ensure consistent default alignment.
 * 4. This can trigger a horizontal scrollbar if the component is as wide as
 *    the viewport.
 */

.Grid {
  display: block; /* 1 */
  font-size: 0; /* 2 */
  margin: 0; /* 1 */
  padding: 0; /* 1 */
  text-align: left; /* 3 */

  // Modifier: gutters
  @include theme(default) {
    margin-left:  ($Grid-gutter-size / -2); /* 4 */
    margin-right: ($Grid-gutter-size / -2); /* 4 */
  }
}

/**
 * Modifier: center align all grid cells
 */

.Grid--alignCenter {
  text-align: center;
}

/**
 * Modifier: right align all grid cells
 */

.Grid--alignRight {
  text-align: right;
}

/**
 * Modifier: middle-align grid cells
 */

.Grid--alignMiddle > .Grid__cell {
  vertical-align: middle;
}

/**
 * Modifier: bottom-align grid cells
 */

.Grid--alignBottom > .Grid__cell {
  vertical-align: bottom;
}

/* Grid cell
   ========================================================================== */

/**
 * No explicit width by default. Rely on combining `Grid-cell` with a dimension
 * utility or a component class that extends 'grid'.
 *
 * 1. Fundamentals of the non-float grid layout.
 * 2. Reset font size change made in `Grid`.
 * 3. Keeps content correctly aligned with the grid direction.
 * 4. Controls vertical positioning of units.
 * 5. Make cells full-width by default.
 */

.Grid__cell {
  box-sizing: border-box;
  display: inline-block; /* 1 */
  font-size: $Grid-font-size; /* 2 */
  margin: 0;
  padding: 0;
  position: relative;
  text-align: left; /* 3 */
  vertical-align: top; /* 4 */
  width: 100%; /* 5 */

  // Modifier: gutters
  @include theme(default) {
    padding-left:  ($Grid-gutter-size / 2);
    padding-right: ($Grid-gutter-size / 2);
  }
}

/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `Grid` object.
 */

.Grid__cell--center {
  display: block;
  margin: 0 auto;
}

.Grid__cell--hasBackground {
  @include theme(default) {
    background-image: linear-gradient(to bottom, #6cab26, #6ceb86); /* W3C */
    background-repeat: repeat-y;
    background-position: 0 bottom;
    background-size: 100% 1px;
  }
}

.Grid--withGutter > .Grid__cell--hasBackground {
  @include theme(default) {
    background-position: ($Grid-gutter-size / 2) bottom;
    background-size: calc(100% - #{$Grid-gutter-size}) 1px;
  }
}